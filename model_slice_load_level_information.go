/*
Nnwdaf_AnalyticsInfo

Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SliceLoadLevelInformation Contains load level information applicable for one or several slices.
type SliceLoadLevelInformation struct {
	// Load level information of the network slice and the optionally associated network slice instance.
	LoadLevelInformation int32 `json:"loadLevelInformation"`
	// Identification(s) of network slice to which the subscription applies.
	Snssais []Snssai `json:"snssais"`
	NumOfUes *NumberAverage `json:"numOfUes,omitempty"`
	NumOfPduSess *NumberAverage `json:"numOfPduSess,omitempty"`
	ExceedLoadLevelThrInd *bool `json:"exceedLoadLevelThrInd,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Confidence *int32 `json:"confidence,omitempty"`
}

// NewSliceLoadLevelInformation instantiates a new SliceLoadLevelInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSliceLoadLevelInformation(loadLevelInformation int32, snssais []Snssai) *SliceLoadLevelInformation {
	this := SliceLoadLevelInformation{}
	this.LoadLevelInformation = loadLevelInformation
	this.Snssais = snssais
	return &this
}

// NewSliceLoadLevelInformationWithDefaults instantiates a new SliceLoadLevelInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliceLoadLevelInformationWithDefaults() *SliceLoadLevelInformation {
	this := SliceLoadLevelInformation{}
	return &this
}

// GetLoadLevelInformation returns the LoadLevelInformation field value
func (o *SliceLoadLevelInformation) GetLoadLevelInformation() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LoadLevelInformation
}

// GetLoadLevelInformationOk returns a tuple with the LoadLevelInformation field value
// and a boolean to check if the value has been set.
func (o *SliceLoadLevelInformation) GetLoadLevelInformationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoadLevelInformation, true
}

// SetLoadLevelInformation sets field value
func (o *SliceLoadLevelInformation) SetLoadLevelInformation(v int32) {
	o.LoadLevelInformation = v
}

// GetSnssais returns the Snssais field value
func (o *SliceLoadLevelInformation) GetSnssais() []Snssai {
	if o == nil {
		var ret []Snssai
		return ret
	}

	return o.Snssais
}

// GetSnssaisOk returns a tuple with the Snssais field value
// and a boolean to check if the value has been set.
func (o *SliceLoadLevelInformation) GetSnssaisOk() ([]Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return o.Snssais, true
}

// SetSnssais sets field value
func (o *SliceLoadLevelInformation) SetSnssais(v []Snssai) {
	o.Snssais = v
}

// GetNumOfUes returns the NumOfUes field value if set, zero value otherwise.
func (o *SliceLoadLevelInformation) GetNumOfUes() NumberAverage {
	if o == nil || o.NumOfUes == nil {
		var ret NumberAverage
		return ret
	}
	return *o.NumOfUes
}

// GetNumOfUesOk returns a tuple with the NumOfUes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliceLoadLevelInformation) GetNumOfUesOk() (*NumberAverage, bool) {
	if o == nil || o.NumOfUes == nil {
		return nil, false
	}
	return o.NumOfUes, true
}

// HasNumOfUes returns a boolean if a field has been set.
func (o *SliceLoadLevelInformation) HasNumOfUes() bool {
	if o != nil && o.NumOfUes != nil {
		return true
	}

	return false
}

// SetNumOfUes gets a reference to the given NumberAverage and assigns it to the NumOfUes field.
func (o *SliceLoadLevelInformation) SetNumOfUes(v NumberAverage) {
	o.NumOfUes = &v
}

// GetNumOfPduSess returns the NumOfPduSess field value if set, zero value otherwise.
func (o *SliceLoadLevelInformation) GetNumOfPduSess() NumberAverage {
	if o == nil || o.NumOfPduSess == nil {
		var ret NumberAverage
		return ret
	}
	return *o.NumOfPduSess
}

// GetNumOfPduSessOk returns a tuple with the NumOfPduSess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliceLoadLevelInformation) GetNumOfPduSessOk() (*NumberAverage, bool) {
	if o == nil || o.NumOfPduSess == nil {
		return nil, false
	}
	return o.NumOfPduSess, true
}

// HasNumOfPduSess returns a boolean if a field has been set.
func (o *SliceLoadLevelInformation) HasNumOfPduSess() bool {
	if o != nil && o.NumOfPduSess != nil {
		return true
	}

	return false
}

// SetNumOfPduSess gets a reference to the given NumberAverage and assigns it to the NumOfPduSess field.
func (o *SliceLoadLevelInformation) SetNumOfPduSess(v NumberAverage) {
	o.NumOfPduSess = &v
}

// GetExceedLoadLevelThrInd returns the ExceedLoadLevelThrInd field value if set, zero value otherwise.
func (o *SliceLoadLevelInformation) GetExceedLoadLevelThrInd() bool {
	if o == nil || o.ExceedLoadLevelThrInd == nil {
		var ret bool
		return ret
	}
	return *o.ExceedLoadLevelThrInd
}

// GetExceedLoadLevelThrIndOk returns a tuple with the ExceedLoadLevelThrInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliceLoadLevelInformation) GetExceedLoadLevelThrIndOk() (*bool, bool) {
	if o == nil || o.ExceedLoadLevelThrInd == nil {
		return nil, false
	}
	return o.ExceedLoadLevelThrInd, true
}

// HasExceedLoadLevelThrInd returns a boolean if a field has been set.
func (o *SliceLoadLevelInformation) HasExceedLoadLevelThrInd() bool {
	if o != nil && o.ExceedLoadLevelThrInd != nil {
		return true
	}

	return false
}

// SetExceedLoadLevelThrInd gets a reference to the given bool and assigns it to the ExceedLoadLevelThrInd field.
func (o *SliceLoadLevelInformation) SetExceedLoadLevelThrInd(v bool) {
	o.ExceedLoadLevelThrInd = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *SliceLoadLevelInformation) GetConfidence() int32 {
	if o == nil || o.Confidence == nil {
		var ret int32
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliceLoadLevelInformation) GetConfidenceOk() (*int32, bool) {
	if o == nil || o.Confidence == nil {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *SliceLoadLevelInformation) HasConfidence() bool {
	if o != nil && o.Confidence != nil {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given int32 and assigns it to the Confidence field.
func (o *SliceLoadLevelInformation) SetConfidence(v int32) {
	o.Confidence = &v
}

func (o SliceLoadLevelInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["loadLevelInformation"] = o.LoadLevelInformation
	}
	if true {
		toSerialize["snssais"] = o.Snssais
	}
	if o.NumOfUes != nil {
		toSerialize["numOfUes"] = o.NumOfUes
	}
	if o.NumOfPduSess != nil {
		toSerialize["numOfPduSess"] = o.NumOfPduSess
	}
	if o.ExceedLoadLevelThrInd != nil {
		toSerialize["exceedLoadLevelThrInd"] = o.ExceedLoadLevelThrInd
	}
	if o.Confidence != nil {
		toSerialize["confidence"] = o.Confidence
	}
	return json.Marshal(toSerialize)
}

type NullableSliceLoadLevelInformation struct {
	value *SliceLoadLevelInformation
	isSet bool
}

func (v NullableSliceLoadLevelInformation) Get() *SliceLoadLevelInformation {
	return v.value
}

func (v *NullableSliceLoadLevelInformation) Set(val *SliceLoadLevelInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableSliceLoadLevelInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableSliceLoadLevelInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliceLoadLevelInformation(val *SliceLoadLevelInformation) *NullableSliceLoadLevelInformation {
	return &NullableSliceLoadLevelInformation{value: val, isSet: true}
}

func (v NullableSliceLoadLevelInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliceLoadLevelInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


