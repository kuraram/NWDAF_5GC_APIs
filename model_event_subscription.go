/*
Nnwdaf_AnalyticsInfo

Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventSubscription Represents a subscription to a single event.
type EventSubscription struct {
	// FALSE represents not applicable for all slices. TRUE represents applicable for all slices.
	AnySlice *bool `json:"anySlice,omitempty"`
	// Identification(s) of application to which the subscription applies.
	AppIds []string `json:"appIds,omitempty"`
	// Identification(s) of DNN to which the subscription applies.
	Dnns []string `json:"dnns,omitempty"`
	Dnais []string `json:"dnais,omitempty"`
	Event NwdafEvent `json:"event"`
	ExtraReportReq *EventReportingRequirement `json:"extraReportReq,omitempty"`
	// Identification(s) of LADN DNN to indicate the LADN service area as the AOI.
	LadnDnns []string `json:"ladnDnns,omitempty"`
	// Indicates that the NWDAF shall report the corresponding network slice load level to the NF service consumer where the load level of the network slice identified by snssais is reached.
	LoadLevelThreshold *int32 `json:"loadLevelThreshold,omitempty"`
	NotificationMethod *NotificationMethod `json:"notificationMethod,omitempty"`
	MatchingDir *MatchingDirection `json:"matchingDir,omitempty"`
	// Shall be supplied in order to start reporting when an average load level is reached.
	NfLoadLvlThds []ThresholdLevel `json:"nfLoadLvlThds,omitempty"`
	NfInstanceIds []string `json:"nfInstanceIds,omitempty"`
	NfSetIds []string `json:"nfSetIds,omitempty"`
	NfTypes []NFType `json:"nfTypes,omitempty"`
	NetworkArea *NetworkAreaInfo `json:"networkArea,omitempty"`
	VisitedAreas []NetworkAreaInfo `json:"visitedAreas,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	MaxTopAppUlNbr *int32 `json:"maxTopAppUlNbr,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	MaxTopAppDlNbr *int32 `json:"maxTopAppDlNbr,omitempty"`
	NsiIdInfos []NsiIdInfo `json:"nsiIdInfos,omitempty"`
	NsiLevelThrds []int32 `json:"nsiLevelThrds,omitempty"`
	QosRequ *QosRequirement `json:"qosRequ,omitempty"`
	QosFlowRetThds []RetainabilityThreshold `json:"qosFlowRetThds,omitempty"`
	RanUeThrouThds []string `json:"ranUeThrouThds,omitempty"`
	// indicating a time in seconds.
	RepetitionPeriod *int32 `json:"repetitionPeriod,omitempty"`
	// Identification(s) of network slice to which the subscription applies. It corresponds to snssais in the data model definition of 3GPP TS 29.520.
	Snssaia []Snssai `json:"snssaia,omitempty"`
	TgtUe *TargetUeInformation `json:"tgtUe,omitempty"`
	CongThresholds []ThresholdLevel `json:"congThresholds,omitempty"`
	NwPerfRequs []NetworkPerfRequirement `json:"nwPerfRequs,omitempty"`
	BwRequs []BwRequirement `json:"bwRequs,omitempty"`
	ExcepRequs []Exception `json:"excepRequs,omitempty"`
	ExptAnaType *ExpectedAnalyticsType `json:"exptAnaType,omitempty"`
	ExptUeBehav *ExpectedUeBehaviourData `json:"exptUeBehav,omitempty"`
	RatTypes []RatType `json:"ratTypes,omitempty"`
	Freqs []int32 `json:"freqs,omitempty"`
	ListOfAnaSubsets []AnalyticsSubset `json:"listOfAnaSubsets,omitempty"`
	DisperReqs []DispersionRequirement `json:"disperReqs,omitempty"`
	RedTransReqs []RedundantTransmissionExpReq `json:"redTransReqs,omitempty"`
	WlanReqs []WlanPerformanceReq `json:"wlanReqs,omitempty"`
	// Identifies the UPF.
	UpfId *string `json:"upfId,omitempty"`
	AppServerAddrs []AddrFqdn `json:"appServerAddrs,omitempty"`
	DnPerfReqs []DnPerformanceReq `json:"dnPerfReqs,omitempty"`
}

// NewEventSubscription instantiates a new EventSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSubscription(event NwdafEvent) *EventSubscription {
	this := EventSubscription{}
	this.Event = event
	return &this
}

// NewEventSubscriptionWithDefaults instantiates a new EventSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSubscriptionWithDefaults() *EventSubscription {
	this := EventSubscription{}
	return &this
}

// GetAnySlice returns the AnySlice field value if set, zero value otherwise.
func (o *EventSubscription) GetAnySlice() bool {
	if o == nil || o.AnySlice == nil {
		var ret bool
		return ret
	}
	return *o.AnySlice
}

// GetAnySliceOk returns a tuple with the AnySlice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetAnySliceOk() (*bool, bool) {
	if o == nil || o.AnySlice == nil {
		return nil, false
	}
	return o.AnySlice, true
}

// HasAnySlice returns a boolean if a field has been set.
func (o *EventSubscription) HasAnySlice() bool {
	if o != nil && o.AnySlice != nil {
		return true
	}

	return false
}

// SetAnySlice gets a reference to the given bool and assigns it to the AnySlice field.
func (o *EventSubscription) SetAnySlice(v bool) {
	o.AnySlice = &v
}

// GetAppIds returns the AppIds field value if set, zero value otherwise.
func (o *EventSubscription) GetAppIds() []string {
	if o == nil || o.AppIds == nil {
		var ret []string
		return ret
	}
	return o.AppIds
}

// GetAppIdsOk returns a tuple with the AppIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetAppIdsOk() ([]string, bool) {
	if o == nil || o.AppIds == nil {
		return nil, false
	}
	return o.AppIds, true
}

// HasAppIds returns a boolean if a field has been set.
func (o *EventSubscription) HasAppIds() bool {
	if o != nil && o.AppIds != nil {
		return true
	}

	return false
}

// SetAppIds gets a reference to the given []string and assigns it to the AppIds field.
func (o *EventSubscription) SetAppIds(v []string) {
	o.AppIds = v
}

// GetDnns returns the Dnns field value if set, zero value otherwise.
func (o *EventSubscription) GetDnns() []string {
	if o == nil || o.Dnns == nil {
		var ret []string
		return ret
	}
	return o.Dnns
}

// GetDnnsOk returns a tuple with the Dnns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetDnnsOk() ([]string, bool) {
	if o == nil || o.Dnns == nil {
		return nil, false
	}
	return o.Dnns, true
}

// HasDnns returns a boolean if a field has been set.
func (o *EventSubscription) HasDnns() bool {
	if o != nil && o.Dnns != nil {
		return true
	}

	return false
}

// SetDnns gets a reference to the given []string and assigns it to the Dnns field.
func (o *EventSubscription) SetDnns(v []string) {
	o.Dnns = v
}

// GetDnais returns the Dnais field value if set, zero value otherwise.
func (o *EventSubscription) GetDnais() []string {
	if o == nil || o.Dnais == nil {
		var ret []string
		return ret
	}
	return o.Dnais
}

// GetDnaisOk returns a tuple with the Dnais field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetDnaisOk() ([]string, bool) {
	if o == nil || o.Dnais == nil {
		return nil, false
	}
	return o.Dnais, true
}

// HasDnais returns a boolean if a field has been set.
func (o *EventSubscription) HasDnais() bool {
	if o != nil && o.Dnais != nil {
		return true
	}

	return false
}

// SetDnais gets a reference to the given []string and assigns it to the Dnais field.
func (o *EventSubscription) SetDnais(v []string) {
	o.Dnais = v
}

// GetEvent returns the Event field value
func (o *EventSubscription) GetEvent() NwdafEvent {
	if o == nil {
		var ret NwdafEvent
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetEventOk() (*NwdafEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *EventSubscription) SetEvent(v NwdafEvent) {
	o.Event = v
}

// GetExtraReportReq returns the ExtraReportReq field value if set, zero value otherwise.
func (o *EventSubscription) GetExtraReportReq() EventReportingRequirement {
	if o == nil || o.ExtraReportReq == nil {
		var ret EventReportingRequirement
		return ret
	}
	return *o.ExtraReportReq
}

// GetExtraReportReqOk returns a tuple with the ExtraReportReq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetExtraReportReqOk() (*EventReportingRequirement, bool) {
	if o == nil || o.ExtraReportReq == nil {
		return nil, false
	}
	return o.ExtraReportReq, true
}

// HasExtraReportReq returns a boolean if a field has been set.
func (o *EventSubscription) HasExtraReportReq() bool {
	if o != nil && o.ExtraReportReq != nil {
		return true
	}

	return false
}

// SetExtraReportReq gets a reference to the given EventReportingRequirement and assigns it to the ExtraReportReq field.
func (o *EventSubscription) SetExtraReportReq(v EventReportingRequirement) {
	o.ExtraReportReq = &v
}

// GetLadnDnns returns the LadnDnns field value if set, zero value otherwise.
func (o *EventSubscription) GetLadnDnns() []string {
	if o == nil || o.LadnDnns == nil {
		var ret []string
		return ret
	}
	return o.LadnDnns
}

// GetLadnDnnsOk returns a tuple with the LadnDnns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetLadnDnnsOk() ([]string, bool) {
	if o == nil || o.LadnDnns == nil {
		return nil, false
	}
	return o.LadnDnns, true
}

// HasLadnDnns returns a boolean if a field has been set.
func (o *EventSubscription) HasLadnDnns() bool {
	if o != nil && o.LadnDnns != nil {
		return true
	}

	return false
}

// SetLadnDnns gets a reference to the given []string and assigns it to the LadnDnns field.
func (o *EventSubscription) SetLadnDnns(v []string) {
	o.LadnDnns = v
}

// GetLoadLevelThreshold returns the LoadLevelThreshold field value if set, zero value otherwise.
func (o *EventSubscription) GetLoadLevelThreshold() int32 {
	if o == nil || o.LoadLevelThreshold == nil {
		var ret int32
		return ret
	}
	return *o.LoadLevelThreshold
}

// GetLoadLevelThresholdOk returns a tuple with the LoadLevelThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetLoadLevelThresholdOk() (*int32, bool) {
	if o == nil || o.LoadLevelThreshold == nil {
		return nil, false
	}
	return o.LoadLevelThreshold, true
}

// HasLoadLevelThreshold returns a boolean if a field has been set.
func (o *EventSubscription) HasLoadLevelThreshold() bool {
	if o != nil && o.LoadLevelThreshold != nil {
		return true
	}

	return false
}

// SetLoadLevelThreshold gets a reference to the given int32 and assigns it to the LoadLevelThreshold field.
func (o *EventSubscription) SetLoadLevelThreshold(v int32) {
	o.LoadLevelThreshold = &v
}

// GetNotificationMethod returns the NotificationMethod field value if set, zero value otherwise.
func (o *EventSubscription) GetNotificationMethod() NotificationMethod {
	if o == nil || o.NotificationMethod == nil {
		var ret NotificationMethod
		return ret
	}
	return *o.NotificationMethod
}

// GetNotificationMethodOk returns a tuple with the NotificationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetNotificationMethodOk() (*NotificationMethod, bool) {
	if o == nil || o.NotificationMethod == nil {
		return nil, false
	}
	return o.NotificationMethod, true
}

// HasNotificationMethod returns a boolean if a field has been set.
func (o *EventSubscription) HasNotificationMethod() bool {
	if o != nil && o.NotificationMethod != nil {
		return true
	}

	return false
}

// SetNotificationMethod gets a reference to the given NotificationMethod and assigns it to the NotificationMethod field.
func (o *EventSubscription) SetNotificationMethod(v NotificationMethod) {
	o.NotificationMethod = &v
}

// GetMatchingDir returns the MatchingDir field value if set, zero value otherwise.
func (o *EventSubscription) GetMatchingDir() MatchingDirection {
	if o == nil || o.MatchingDir == nil {
		var ret MatchingDirection
		return ret
	}
	return *o.MatchingDir
}

// GetMatchingDirOk returns a tuple with the MatchingDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetMatchingDirOk() (*MatchingDirection, bool) {
	if o == nil || o.MatchingDir == nil {
		return nil, false
	}
	return o.MatchingDir, true
}

// HasMatchingDir returns a boolean if a field has been set.
func (o *EventSubscription) HasMatchingDir() bool {
	if o != nil && o.MatchingDir != nil {
		return true
	}

	return false
}

// SetMatchingDir gets a reference to the given MatchingDirection and assigns it to the MatchingDir field.
func (o *EventSubscription) SetMatchingDir(v MatchingDirection) {
	o.MatchingDir = &v
}

// GetNfLoadLvlThds returns the NfLoadLvlThds field value if set, zero value otherwise.
func (o *EventSubscription) GetNfLoadLvlThds() []ThresholdLevel {
	if o == nil || o.NfLoadLvlThds == nil {
		var ret []ThresholdLevel
		return ret
	}
	return o.NfLoadLvlThds
}

// GetNfLoadLvlThdsOk returns a tuple with the NfLoadLvlThds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetNfLoadLvlThdsOk() ([]ThresholdLevel, bool) {
	if o == nil || o.NfLoadLvlThds == nil {
		return nil, false
	}
	return o.NfLoadLvlThds, true
}

// HasNfLoadLvlThds returns a boolean if a field has been set.
func (o *EventSubscription) HasNfLoadLvlThds() bool {
	if o != nil && o.NfLoadLvlThds != nil {
		return true
	}

	return false
}

// SetNfLoadLvlThds gets a reference to the given []ThresholdLevel and assigns it to the NfLoadLvlThds field.
func (o *EventSubscription) SetNfLoadLvlThds(v []ThresholdLevel) {
	o.NfLoadLvlThds = v
}

// GetNfInstanceIds returns the NfInstanceIds field value if set, zero value otherwise.
func (o *EventSubscription) GetNfInstanceIds() []string {
	if o == nil || o.NfInstanceIds == nil {
		var ret []string
		return ret
	}
	return o.NfInstanceIds
}

// GetNfInstanceIdsOk returns a tuple with the NfInstanceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetNfInstanceIdsOk() ([]string, bool) {
	if o == nil || o.NfInstanceIds == nil {
		return nil, false
	}
	return o.NfInstanceIds, true
}

// HasNfInstanceIds returns a boolean if a field has been set.
func (o *EventSubscription) HasNfInstanceIds() bool {
	if o != nil && o.NfInstanceIds != nil {
		return true
	}

	return false
}

// SetNfInstanceIds gets a reference to the given []string and assigns it to the NfInstanceIds field.
func (o *EventSubscription) SetNfInstanceIds(v []string) {
	o.NfInstanceIds = v
}

// GetNfSetIds returns the NfSetIds field value if set, zero value otherwise.
func (o *EventSubscription) GetNfSetIds() []string {
	if o == nil || o.NfSetIds == nil {
		var ret []string
		return ret
	}
	return o.NfSetIds
}

// GetNfSetIdsOk returns a tuple with the NfSetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetNfSetIdsOk() ([]string, bool) {
	if o == nil || o.NfSetIds == nil {
		return nil, false
	}
	return o.NfSetIds, true
}

// HasNfSetIds returns a boolean if a field has been set.
func (o *EventSubscription) HasNfSetIds() bool {
	if o != nil && o.NfSetIds != nil {
		return true
	}

	return false
}

// SetNfSetIds gets a reference to the given []string and assigns it to the NfSetIds field.
func (o *EventSubscription) SetNfSetIds(v []string) {
	o.NfSetIds = v
}

// GetNfTypes returns the NfTypes field value if set, zero value otherwise.
func (o *EventSubscription) GetNfTypes() []NFType {
	if o == nil || o.NfTypes == nil {
		var ret []NFType
		return ret
	}
	return o.NfTypes
}

// GetNfTypesOk returns a tuple with the NfTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetNfTypesOk() ([]NFType, bool) {
	if o == nil || o.NfTypes == nil {
		return nil, false
	}
	return o.NfTypes, true
}

// HasNfTypes returns a boolean if a field has been set.
func (o *EventSubscription) HasNfTypes() bool {
	if o != nil && o.NfTypes != nil {
		return true
	}

	return false
}

// SetNfTypes gets a reference to the given []NFType and assigns it to the NfTypes field.
func (o *EventSubscription) SetNfTypes(v []NFType) {
	o.NfTypes = v
}

// GetNetworkArea returns the NetworkArea field value if set, zero value otherwise.
func (o *EventSubscription) GetNetworkArea() NetworkAreaInfo {
	if o == nil || o.NetworkArea == nil {
		var ret NetworkAreaInfo
		return ret
	}
	return *o.NetworkArea
}

// GetNetworkAreaOk returns a tuple with the NetworkArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetNetworkAreaOk() (*NetworkAreaInfo, bool) {
	if o == nil || o.NetworkArea == nil {
		return nil, false
	}
	return o.NetworkArea, true
}

// HasNetworkArea returns a boolean if a field has been set.
func (o *EventSubscription) HasNetworkArea() bool {
	if o != nil && o.NetworkArea != nil {
		return true
	}

	return false
}

// SetNetworkArea gets a reference to the given NetworkAreaInfo and assigns it to the NetworkArea field.
func (o *EventSubscription) SetNetworkArea(v NetworkAreaInfo) {
	o.NetworkArea = &v
}

// GetVisitedAreas returns the VisitedAreas field value if set, zero value otherwise.
func (o *EventSubscription) GetVisitedAreas() []NetworkAreaInfo {
	if o == nil || o.VisitedAreas == nil {
		var ret []NetworkAreaInfo
		return ret
	}
	return o.VisitedAreas
}

// GetVisitedAreasOk returns a tuple with the VisitedAreas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetVisitedAreasOk() ([]NetworkAreaInfo, bool) {
	if o == nil || o.VisitedAreas == nil {
		return nil, false
	}
	return o.VisitedAreas, true
}

// HasVisitedAreas returns a boolean if a field has been set.
func (o *EventSubscription) HasVisitedAreas() bool {
	if o != nil && o.VisitedAreas != nil {
		return true
	}

	return false
}

// SetVisitedAreas gets a reference to the given []NetworkAreaInfo and assigns it to the VisitedAreas field.
func (o *EventSubscription) SetVisitedAreas(v []NetworkAreaInfo) {
	o.VisitedAreas = v
}

// GetMaxTopAppUlNbr returns the MaxTopAppUlNbr field value if set, zero value otherwise.
func (o *EventSubscription) GetMaxTopAppUlNbr() int32 {
	if o == nil || o.MaxTopAppUlNbr == nil {
		var ret int32
		return ret
	}
	return *o.MaxTopAppUlNbr
}

// GetMaxTopAppUlNbrOk returns a tuple with the MaxTopAppUlNbr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetMaxTopAppUlNbrOk() (*int32, bool) {
	if o == nil || o.MaxTopAppUlNbr == nil {
		return nil, false
	}
	return o.MaxTopAppUlNbr, true
}

// HasMaxTopAppUlNbr returns a boolean if a field has been set.
func (o *EventSubscription) HasMaxTopAppUlNbr() bool {
	if o != nil && o.MaxTopAppUlNbr != nil {
		return true
	}

	return false
}

// SetMaxTopAppUlNbr gets a reference to the given int32 and assigns it to the MaxTopAppUlNbr field.
func (o *EventSubscription) SetMaxTopAppUlNbr(v int32) {
	o.MaxTopAppUlNbr = &v
}

// GetMaxTopAppDlNbr returns the MaxTopAppDlNbr field value if set, zero value otherwise.
func (o *EventSubscription) GetMaxTopAppDlNbr() int32 {
	if o == nil || o.MaxTopAppDlNbr == nil {
		var ret int32
		return ret
	}
	return *o.MaxTopAppDlNbr
}

// GetMaxTopAppDlNbrOk returns a tuple with the MaxTopAppDlNbr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetMaxTopAppDlNbrOk() (*int32, bool) {
	if o == nil || o.MaxTopAppDlNbr == nil {
		return nil, false
	}
	return o.MaxTopAppDlNbr, true
}

// HasMaxTopAppDlNbr returns a boolean if a field has been set.
func (o *EventSubscription) HasMaxTopAppDlNbr() bool {
	if o != nil && o.MaxTopAppDlNbr != nil {
		return true
	}

	return false
}

// SetMaxTopAppDlNbr gets a reference to the given int32 and assigns it to the MaxTopAppDlNbr field.
func (o *EventSubscription) SetMaxTopAppDlNbr(v int32) {
	o.MaxTopAppDlNbr = &v
}

// GetNsiIdInfos returns the NsiIdInfos field value if set, zero value otherwise.
func (o *EventSubscription) GetNsiIdInfos() []NsiIdInfo {
	if o == nil || o.NsiIdInfos == nil {
		var ret []NsiIdInfo
		return ret
	}
	return o.NsiIdInfos
}

// GetNsiIdInfosOk returns a tuple with the NsiIdInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetNsiIdInfosOk() ([]NsiIdInfo, bool) {
	if o == nil || o.NsiIdInfos == nil {
		return nil, false
	}
	return o.NsiIdInfos, true
}

// HasNsiIdInfos returns a boolean if a field has been set.
func (o *EventSubscription) HasNsiIdInfos() bool {
	if o != nil && o.NsiIdInfos != nil {
		return true
	}

	return false
}

// SetNsiIdInfos gets a reference to the given []NsiIdInfo and assigns it to the NsiIdInfos field.
func (o *EventSubscription) SetNsiIdInfos(v []NsiIdInfo) {
	o.NsiIdInfos = v
}

// GetNsiLevelThrds returns the NsiLevelThrds field value if set, zero value otherwise.
func (o *EventSubscription) GetNsiLevelThrds() []int32 {
	if o == nil || o.NsiLevelThrds == nil {
		var ret []int32
		return ret
	}
	return o.NsiLevelThrds
}

// GetNsiLevelThrdsOk returns a tuple with the NsiLevelThrds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetNsiLevelThrdsOk() ([]int32, bool) {
	if o == nil || o.NsiLevelThrds == nil {
		return nil, false
	}
	return o.NsiLevelThrds, true
}

// HasNsiLevelThrds returns a boolean if a field has been set.
func (o *EventSubscription) HasNsiLevelThrds() bool {
	if o != nil && o.NsiLevelThrds != nil {
		return true
	}

	return false
}

// SetNsiLevelThrds gets a reference to the given []int32 and assigns it to the NsiLevelThrds field.
func (o *EventSubscription) SetNsiLevelThrds(v []int32) {
	o.NsiLevelThrds = v
}

// GetQosRequ returns the QosRequ field value if set, zero value otherwise.
func (o *EventSubscription) GetQosRequ() QosRequirement {
	if o == nil || o.QosRequ == nil {
		var ret QosRequirement
		return ret
	}
	return *o.QosRequ
}

// GetQosRequOk returns a tuple with the QosRequ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetQosRequOk() (*QosRequirement, bool) {
	if o == nil || o.QosRequ == nil {
		return nil, false
	}
	return o.QosRequ, true
}

// HasQosRequ returns a boolean if a field has been set.
func (o *EventSubscription) HasQosRequ() bool {
	if o != nil && o.QosRequ != nil {
		return true
	}

	return false
}

// SetQosRequ gets a reference to the given QosRequirement and assigns it to the QosRequ field.
func (o *EventSubscription) SetQosRequ(v QosRequirement) {
	o.QosRequ = &v
}

// GetQosFlowRetThds returns the QosFlowRetThds field value if set, zero value otherwise.
func (o *EventSubscription) GetQosFlowRetThds() []RetainabilityThreshold {
	if o == nil || o.QosFlowRetThds == nil {
		var ret []RetainabilityThreshold
		return ret
	}
	return o.QosFlowRetThds
}

// GetQosFlowRetThdsOk returns a tuple with the QosFlowRetThds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetQosFlowRetThdsOk() ([]RetainabilityThreshold, bool) {
	if o == nil || o.QosFlowRetThds == nil {
		return nil, false
	}
	return o.QosFlowRetThds, true
}

// HasQosFlowRetThds returns a boolean if a field has been set.
func (o *EventSubscription) HasQosFlowRetThds() bool {
	if o != nil && o.QosFlowRetThds != nil {
		return true
	}

	return false
}

// SetQosFlowRetThds gets a reference to the given []RetainabilityThreshold and assigns it to the QosFlowRetThds field.
func (o *EventSubscription) SetQosFlowRetThds(v []RetainabilityThreshold) {
	o.QosFlowRetThds = v
}

// GetRanUeThrouThds returns the RanUeThrouThds field value if set, zero value otherwise.
func (o *EventSubscription) GetRanUeThrouThds() []string {
	if o == nil || o.RanUeThrouThds == nil {
		var ret []string
		return ret
	}
	return o.RanUeThrouThds
}

// GetRanUeThrouThdsOk returns a tuple with the RanUeThrouThds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetRanUeThrouThdsOk() ([]string, bool) {
	if o == nil || o.RanUeThrouThds == nil {
		return nil, false
	}
	return o.RanUeThrouThds, true
}

// HasRanUeThrouThds returns a boolean if a field has been set.
func (o *EventSubscription) HasRanUeThrouThds() bool {
	if o != nil && o.RanUeThrouThds != nil {
		return true
	}

	return false
}

// SetRanUeThrouThds gets a reference to the given []string and assigns it to the RanUeThrouThds field.
func (o *EventSubscription) SetRanUeThrouThds(v []string) {
	o.RanUeThrouThds = v
}

// GetRepetitionPeriod returns the RepetitionPeriod field value if set, zero value otherwise.
func (o *EventSubscription) GetRepetitionPeriod() int32 {
	if o == nil || o.RepetitionPeriod == nil {
		var ret int32
		return ret
	}
	return *o.RepetitionPeriod
}

// GetRepetitionPeriodOk returns a tuple with the RepetitionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetRepetitionPeriodOk() (*int32, bool) {
	if o == nil || o.RepetitionPeriod == nil {
		return nil, false
	}
	return o.RepetitionPeriod, true
}

// HasRepetitionPeriod returns a boolean if a field has been set.
func (o *EventSubscription) HasRepetitionPeriod() bool {
	if o != nil && o.RepetitionPeriod != nil {
		return true
	}

	return false
}

// SetRepetitionPeriod gets a reference to the given int32 and assigns it to the RepetitionPeriod field.
func (o *EventSubscription) SetRepetitionPeriod(v int32) {
	o.RepetitionPeriod = &v
}

// GetSnssaia returns the Snssaia field value if set, zero value otherwise.
func (o *EventSubscription) GetSnssaia() []Snssai {
	if o == nil || o.Snssaia == nil {
		var ret []Snssai
		return ret
	}
	return o.Snssaia
}

// GetSnssaiaOk returns a tuple with the Snssaia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetSnssaiaOk() ([]Snssai, bool) {
	if o == nil || o.Snssaia == nil {
		return nil, false
	}
	return o.Snssaia, true
}

// HasSnssaia returns a boolean if a field has been set.
func (o *EventSubscription) HasSnssaia() bool {
	if o != nil && o.Snssaia != nil {
		return true
	}

	return false
}

// SetSnssaia gets a reference to the given []Snssai and assigns it to the Snssaia field.
func (o *EventSubscription) SetSnssaia(v []Snssai) {
	o.Snssaia = v
}

// GetTgtUe returns the TgtUe field value if set, zero value otherwise.
func (o *EventSubscription) GetTgtUe() TargetUeInformation {
	if o == nil || o.TgtUe == nil {
		var ret TargetUeInformation
		return ret
	}
	return *o.TgtUe
}

// GetTgtUeOk returns a tuple with the TgtUe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetTgtUeOk() (*TargetUeInformation, bool) {
	if o == nil || o.TgtUe == nil {
		return nil, false
	}
	return o.TgtUe, true
}

// HasTgtUe returns a boolean if a field has been set.
func (o *EventSubscription) HasTgtUe() bool {
	if o != nil && o.TgtUe != nil {
		return true
	}

	return false
}

// SetTgtUe gets a reference to the given TargetUeInformation and assigns it to the TgtUe field.
func (o *EventSubscription) SetTgtUe(v TargetUeInformation) {
	o.TgtUe = &v
}

// GetCongThresholds returns the CongThresholds field value if set, zero value otherwise.
func (o *EventSubscription) GetCongThresholds() []ThresholdLevel {
	if o == nil || o.CongThresholds == nil {
		var ret []ThresholdLevel
		return ret
	}
	return o.CongThresholds
}

// GetCongThresholdsOk returns a tuple with the CongThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetCongThresholdsOk() ([]ThresholdLevel, bool) {
	if o == nil || o.CongThresholds == nil {
		return nil, false
	}
	return o.CongThresholds, true
}

// HasCongThresholds returns a boolean if a field has been set.
func (o *EventSubscription) HasCongThresholds() bool {
	if o != nil && o.CongThresholds != nil {
		return true
	}

	return false
}

// SetCongThresholds gets a reference to the given []ThresholdLevel and assigns it to the CongThresholds field.
func (o *EventSubscription) SetCongThresholds(v []ThresholdLevel) {
	o.CongThresholds = v
}

// GetNwPerfRequs returns the NwPerfRequs field value if set, zero value otherwise.
func (o *EventSubscription) GetNwPerfRequs() []NetworkPerfRequirement {
	if o == nil || o.NwPerfRequs == nil {
		var ret []NetworkPerfRequirement
		return ret
	}
	return o.NwPerfRequs
}

// GetNwPerfRequsOk returns a tuple with the NwPerfRequs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetNwPerfRequsOk() ([]NetworkPerfRequirement, bool) {
	if o == nil || o.NwPerfRequs == nil {
		return nil, false
	}
	return o.NwPerfRequs, true
}

// HasNwPerfRequs returns a boolean if a field has been set.
func (o *EventSubscription) HasNwPerfRequs() bool {
	if o != nil && o.NwPerfRequs != nil {
		return true
	}

	return false
}

// SetNwPerfRequs gets a reference to the given []NetworkPerfRequirement and assigns it to the NwPerfRequs field.
func (o *EventSubscription) SetNwPerfRequs(v []NetworkPerfRequirement) {
	o.NwPerfRequs = v
}

// GetBwRequs returns the BwRequs field value if set, zero value otherwise.
func (o *EventSubscription) GetBwRequs() []BwRequirement {
	if o == nil || o.BwRequs == nil {
		var ret []BwRequirement
		return ret
	}
	return o.BwRequs
}

// GetBwRequsOk returns a tuple with the BwRequs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetBwRequsOk() ([]BwRequirement, bool) {
	if o == nil || o.BwRequs == nil {
		return nil, false
	}
	return o.BwRequs, true
}

// HasBwRequs returns a boolean if a field has been set.
func (o *EventSubscription) HasBwRequs() bool {
	if o != nil && o.BwRequs != nil {
		return true
	}

	return false
}

// SetBwRequs gets a reference to the given []BwRequirement and assigns it to the BwRequs field.
func (o *EventSubscription) SetBwRequs(v []BwRequirement) {
	o.BwRequs = v
}

// GetExcepRequs returns the ExcepRequs field value if set, zero value otherwise.
func (o *EventSubscription) GetExcepRequs() []Exception {
	if o == nil || o.ExcepRequs == nil {
		var ret []Exception
		return ret
	}
	return o.ExcepRequs
}

// GetExcepRequsOk returns a tuple with the ExcepRequs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetExcepRequsOk() ([]Exception, bool) {
	if o == nil || o.ExcepRequs == nil {
		return nil, false
	}
	return o.ExcepRequs, true
}

// HasExcepRequs returns a boolean if a field has been set.
func (o *EventSubscription) HasExcepRequs() bool {
	if o != nil && o.ExcepRequs != nil {
		return true
	}

	return false
}

// SetExcepRequs gets a reference to the given []Exception and assigns it to the ExcepRequs field.
func (o *EventSubscription) SetExcepRequs(v []Exception) {
	o.ExcepRequs = v
}

// GetExptAnaType returns the ExptAnaType field value if set, zero value otherwise.
func (o *EventSubscription) GetExptAnaType() ExpectedAnalyticsType {
	if o == nil || o.ExptAnaType == nil {
		var ret ExpectedAnalyticsType
		return ret
	}
	return *o.ExptAnaType
}

// GetExptAnaTypeOk returns a tuple with the ExptAnaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetExptAnaTypeOk() (*ExpectedAnalyticsType, bool) {
	if o == nil || o.ExptAnaType == nil {
		return nil, false
	}
	return o.ExptAnaType, true
}

// HasExptAnaType returns a boolean if a field has been set.
func (o *EventSubscription) HasExptAnaType() bool {
	if o != nil && o.ExptAnaType != nil {
		return true
	}

	return false
}

// SetExptAnaType gets a reference to the given ExpectedAnalyticsType and assigns it to the ExptAnaType field.
func (o *EventSubscription) SetExptAnaType(v ExpectedAnalyticsType) {
	o.ExptAnaType = &v
}

// GetExptUeBehav returns the ExptUeBehav field value if set, zero value otherwise.
func (o *EventSubscription) GetExptUeBehav() ExpectedUeBehaviourData {
	if o == nil || o.ExptUeBehav == nil {
		var ret ExpectedUeBehaviourData
		return ret
	}
	return *o.ExptUeBehav
}

// GetExptUeBehavOk returns a tuple with the ExptUeBehav field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetExptUeBehavOk() (*ExpectedUeBehaviourData, bool) {
	if o == nil || o.ExptUeBehav == nil {
		return nil, false
	}
	return o.ExptUeBehav, true
}

// HasExptUeBehav returns a boolean if a field has been set.
func (o *EventSubscription) HasExptUeBehav() bool {
	if o != nil && o.ExptUeBehav != nil {
		return true
	}

	return false
}

// SetExptUeBehav gets a reference to the given ExpectedUeBehaviourData and assigns it to the ExptUeBehav field.
func (o *EventSubscription) SetExptUeBehav(v ExpectedUeBehaviourData) {
	o.ExptUeBehav = &v
}

// GetRatTypes returns the RatTypes field value if set, zero value otherwise.
func (o *EventSubscription) GetRatTypes() []RatType {
	if o == nil || o.RatTypes == nil {
		var ret []RatType
		return ret
	}
	return o.RatTypes
}

// GetRatTypesOk returns a tuple with the RatTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetRatTypesOk() ([]RatType, bool) {
	if o == nil || o.RatTypes == nil {
		return nil, false
	}
	return o.RatTypes, true
}

// HasRatTypes returns a boolean if a field has been set.
func (o *EventSubscription) HasRatTypes() bool {
	if o != nil && o.RatTypes != nil {
		return true
	}

	return false
}

// SetRatTypes gets a reference to the given []RatType and assigns it to the RatTypes field.
func (o *EventSubscription) SetRatTypes(v []RatType) {
	o.RatTypes = v
}

// GetFreqs returns the Freqs field value if set, zero value otherwise.
func (o *EventSubscription) GetFreqs() []int32 {
	if o == nil || o.Freqs == nil {
		var ret []int32
		return ret
	}
	return o.Freqs
}

// GetFreqsOk returns a tuple with the Freqs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetFreqsOk() ([]int32, bool) {
	if o == nil || o.Freqs == nil {
		return nil, false
	}
	return o.Freqs, true
}

// HasFreqs returns a boolean if a field has been set.
func (o *EventSubscription) HasFreqs() bool {
	if o != nil && o.Freqs != nil {
		return true
	}

	return false
}

// SetFreqs gets a reference to the given []int32 and assigns it to the Freqs field.
func (o *EventSubscription) SetFreqs(v []int32) {
	o.Freqs = v
}

// GetListOfAnaSubsets returns the ListOfAnaSubsets field value if set, zero value otherwise.
func (o *EventSubscription) GetListOfAnaSubsets() []AnalyticsSubset {
	if o == nil || o.ListOfAnaSubsets == nil {
		var ret []AnalyticsSubset
		return ret
	}
	return o.ListOfAnaSubsets
}

// GetListOfAnaSubsetsOk returns a tuple with the ListOfAnaSubsets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetListOfAnaSubsetsOk() ([]AnalyticsSubset, bool) {
	if o == nil || o.ListOfAnaSubsets == nil {
		return nil, false
	}
	return o.ListOfAnaSubsets, true
}

// HasListOfAnaSubsets returns a boolean if a field has been set.
func (o *EventSubscription) HasListOfAnaSubsets() bool {
	if o != nil && o.ListOfAnaSubsets != nil {
		return true
	}

	return false
}

// SetListOfAnaSubsets gets a reference to the given []AnalyticsSubset and assigns it to the ListOfAnaSubsets field.
func (o *EventSubscription) SetListOfAnaSubsets(v []AnalyticsSubset) {
	o.ListOfAnaSubsets = v
}

// GetDisperReqs returns the DisperReqs field value if set, zero value otherwise.
func (o *EventSubscription) GetDisperReqs() []DispersionRequirement {
	if o == nil || o.DisperReqs == nil {
		var ret []DispersionRequirement
		return ret
	}
	return o.DisperReqs
}

// GetDisperReqsOk returns a tuple with the DisperReqs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetDisperReqsOk() ([]DispersionRequirement, bool) {
	if o == nil || o.DisperReqs == nil {
		return nil, false
	}
	return o.DisperReqs, true
}

// HasDisperReqs returns a boolean if a field has been set.
func (o *EventSubscription) HasDisperReqs() bool {
	if o != nil && o.DisperReqs != nil {
		return true
	}

	return false
}

// SetDisperReqs gets a reference to the given []DispersionRequirement and assigns it to the DisperReqs field.
func (o *EventSubscription) SetDisperReqs(v []DispersionRequirement) {
	o.DisperReqs = v
}

// GetRedTransReqs returns the RedTransReqs field value if set, zero value otherwise.
func (o *EventSubscription) GetRedTransReqs() []RedundantTransmissionExpReq {
	if o == nil || o.RedTransReqs == nil {
		var ret []RedundantTransmissionExpReq
		return ret
	}
	return o.RedTransReqs
}

// GetRedTransReqsOk returns a tuple with the RedTransReqs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetRedTransReqsOk() ([]RedundantTransmissionExpReq, bool) {
	if o == nil || o.RedTransReqs == nil {
		return nil, false
	}
	return o.RedTransReqs, true
}

// HasRedTransReqs returns a boolean if a field has been set.
func (o *EventSubscription) HasRedTransReqs() bool {
	if o != nil && o.RedTransReqs != nil {
		return true
	}

	return false
}

// SetRedTransReqs gets a reference to the given []RedundantTransmissionExpReq and assigns it to the RedTransReqs field.
func (o *EventSubscription) SetRedTransReqs(v []RedundantTransmissionExpReq) {
	o.RedTransReqs = v
}

// GetWlanReqs returns the WlanReqs field value if set, zero value otherwise.
func (o *EventSubscription) GetWlanReqs() []WlanPerformanceReq {
	if o == nil || o.WlanReqs == nil {
		var ret []WlanPerformanceReq
		return ret
	}
	return o.WlanReqs
}

// GetWlanReqsOk returns a tuple with the WlanReqs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetWlanReqsOk() ([]WlanPerformanceReq, bool) {
	if o == nil || o.WlanReqs == nil {
		return nil, false
	}
	return o.WlanReqs, true
}

// HasWlanReqs returns a boolean if a field has been set.
func (o *EventSubscription) HasWlanReqs() bool {
	if o != nil && o.WlanReqs != nil {
		return true
	}

	return false
}

// SetWlanReqs gets a reference to the given []WlanPerformanceReq and assigns it to the WlanReqs field.
func (o *EventSubscription) SetWlanReqs(v []WlanPerformanceReq) {
	o.WlanReqs = v
}

// GetUpfId returns the UpfId field value if set, zero value otherwise.
func (o *EventSubscription) GetUpfId() string {
	if o == nil || o.UpfId == nil {
		var ret string
		return ret
	}
	return *o.UpfId
}

// GetUpfIdOk returns a tuple with the UpfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetUpfIdOk() (*string, bool) {
	if o == nil || o.UpfId == nil {
		return nil, false
	}
	return o.UpfId, true
}

// HasUpfId returns a boolean if a field has been set.
func (o *EventSubscription) HasUpfId() bool {
	if o != nil && o.UpfId != nil {
		return true
	}

	return false
}

// SetUpfId gets a reference to the given string and assigns it to the UpfId field.
func (o *EventSubscription) SetUpfId(v string) {
	o.UpfId = &v
}

// GetAppServerAddrs returns the AppServerAddrs field value if set, zero value otherwise.
func (o *EventSubscription) GetAppServerAddrs() []AddrFqdn {
	if o == nil || o.AppServerAddrs == nil {
		var ret []AddrFqdn
		return ret
	}
	return o.AppServerAddrs
}

// GetAppServerAddrsOk returns a tuple with the AppServerAddrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetAppServerAddrsOk() ([]AddrFqdn, bool) {
	if o == nil || o.AppServerAddrs == nil {
		return nil, false
	}
	return o.AppServerAddrs, true
}

// HasAppServerAddrs returns a boolean if a field has been set.
func (o *EventSubscription) HasAppServerAddrs() bool {
	if o != nil && o.AppServerAddrs != nil {
		return true
	}

	return false
}

// SetAppServerAddrs gets a reference to the given []AddrFqdn and assigns it to the AppServerAddrs field.
func (o *EventSubscription) SetAppServerAddrs(v []AddrFqdn) {
	o.AppServerAddrs = v
}

// GetDnPerfReqs returns the DnPerfReqs field value if set, zero value otherwise.
func (o *EventSubscription) GetDnPerfReqs() []DnPerformanceReq {
	if o == nil || o.DnPerfReqs == nil {
		var ret []DnPerformanceReq
		return ret
	}
	return o.DnPerfReqs
}

// GetDnPerfReqsOk returns a tuple with the DnPerfReqs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSubscription) GetDnPerfReqsOk() ([]DnPerformanceReq, bool) {
	if o == nil || o.DnPerfReqs == nil {
		return nil, false
	}
	return o.DnPerfReqs, true
}

// HasDnPerfReqs returns a boolean if a field has been set.
func (o *EventSubscription) HasDnPerfReqs() bool {
	if o != nil && o.DnPerfReqs != nil {
		return true
	}

	return false
}

// SetDnPerfReqs gets a reference to the given []DnPerformanceReq and assigns it to the DnPerfReqs field.
func (o *EventSubscription) SetDnPerfReqs(v []DnPerformanceReq) {
	o.DnPerfReqs = v
}

func (o EventSubscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AnySlice != nil {
		toSerialize["anySlice"] = o.AnySlice
	}
	if o.AppIds != nil {
		toSerialize["appIds"] = o.AppIds
	}
	if o.Dnns != nil {
		toSerialize["dnns"] = o.Dnns
	}
	if o.Dnais != nil {
		toSerialize["dnais"] = o.Dnais
	}
	if true {
		toSerialize["event"] = o.Event
	}
	if o.ExtraReportReq != nil {
		toSerialize["extraReportReq"] = o.ExtraReportReq
	}
	if o.LadnDnns != nil {
		toSerialize["ladnDnns"] = o.LadnDnns
	}
	if o.LoadLevelThreshold != nil {
		toSerialize["loadLevelThreshold"] = o.LoadLevelThreshold
	}
	if o.NotificationMethod != nil {
		toSerialize["notificationMethod"] = o.NotificationMethod
	}
	if o.MatchingDir != nil {
		toSerialize["matchingDir"] = o.MatchingDir
	}
	if o.NfLoadLvlThds != nil {
		toSerialize["nfLoadLvlThds"] = o.NfLoadLvlThds
	}
	if o.NfInstanceIds != nil {
		toSerialize["nfInstanceIds"] = o.NfInstanceIds
	}
	if o.NfSetIds != nil {
		toSerialize["nfSetIds"] = o.NfSetIds
	}
	if o.NfTypes != nil {
		toSerialize["nfTypes"] = o.NfTypes
	}
	if o.NetworkArea != nil {
		toSerialize["networkArea"] = o.NetworkArea
	}
	if o.VisitedAreas != nil {
		toSerialize["visitedAreas"] = o.VisitedAreas
	}
	if o.MaxTopAppUlNbr != nil {
		toSerialize["maxTopAppUlNbr"] = o.MaxTopAppUlNbr
	}
	if o.MaxTopAppDlNbr != nil {
		toSerialize["maxTopAppDlNbr"] = o.MaxTopAppDlNbr
	}
	if o.NsiIdInfos != nil {
		toSerialize["nsiIdInfos"] = o.NsiIdInfos
	}
	if o.NsiLevelThrds != nil {
		toSerialize["nsiLevelThrds"] = o.NsiLevelThrds
	}
	if o.QosRequ != nil {
		toSerialize["qosRequ"] = o.QosRequ
	}
	if o.QosFlowRetThds != nil {
		toSerialize["qosFlowRetThds"] = o.QosFlowRetThds
	}
	if o.RanUeThrouThds != nil {
		toSerialize["ranUeThrouThds"] = o.RanUeThrouThds
	}
	if o.RepetitionPeriod != nil {
		toSerialize["repetitionPeriod"] = o.RepetitionPeriod
	}
	if o.Snssaia != nil {
		toSerialize["snssaia"] = o.Snssaia
	}
	if o.TgtUe != nil {
		toSerialize["tgtUe"] = o.TgtUe
	}
	if o.CongThresholds != nil {
		toSerialize["congThresholds"] = o.CongThresholds
	}
	if o.NwPerfRequs != nil {
		toSerialize["nwPerfRequs"] = o.NwPerfRequs
	}
	if o.BwRequs != nil {
		toSerialize["bwRequs"] = o.BwRequs
	}
	if o.ExcepRequs != nil {
		toSerialize["excepRequs"] = o.ExcepRequs
	}
	if o.ExptAnaType != nil {
		toSerialize["exptAnaType"] = o.ExptAnaType
	}
	if o.ExptUeBehav != nil {
		toSerialize["exptUeBehav"] = o.ExptUeBehav
	}
	if o.RatTypes != nil {
		toSerialize["ratTypes"] = o.RatTypes
	}
	if o.Freqs != nil {
		toSerialize["freqs"] = o.Freqs
	}
	if o.ListOfAnaSubsets != nil {
		toSerialize["listOfAnaSubsets"] = o.ListOfAnaSubsets
	}
	if o.DisperReqs != nil {
		toSerialize["disperReqs"] = o.DisperReqs
	}
	if o.RedTransReqs != nil {
		toSerialize["redTransReqs"] = o.RedTransReqs
	}
	if o.WlanReqs != nil {
		toSerialize["wlanReqs"] = o.WlanReqs
	}
	if o.UpfId != nil {
		toSerialize["upfId"] = o.UpfId
	}
	if o.AppServerAddrs != nil {
		toSerialize["appServerAddrs"] = o.AppServerAddrs
	}
	if o.DnPerfReqs != nil {
		toSerialize["dnPerfReqs"] = o.DnPerfReqs
	}
	return json.Marshal(toSerialize)
}

type NullableEventSubscription struct {
	value *EventSubscription
	isSet bool
}

func (v NullableEventSubscription) Get() *EventSubscription {
	return v.value
}

func (v *NullableEventSubscription) Set(val *EventSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSubscription(val *EventSubscription) *NullableEventSubscription {
	return &NullableEventSubscription{value: val, isSet: true}
}

func (v NullableEventSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


