/*
Nnwdaf_AnalyticsInfo

Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SmcceUeList Represents the List of UEs classified based on experience level of Session Management congestion control.
type SmcceUeList struct {
	HighLevel []string `json:"highLevel,omitempty"`
	MediumLevel []string `json:"mediumLevel,omitempty"`
	LowLevel []string `json:"lowLevel,omitempty"`
}

// NewSmcceUeList instantiates a new SmcceUeList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmcceUeList() *SmcceUeList {
	this := SmcceUeList{}
	return &this
}

// NewSmcceUeListWithDefaults instantiates a new SmcceUeList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmcceUeListWithDefaults() *SmcceUeList {
	this := SmcceUeList{}
	return &this
}

// GetHighLevel returns the HighLevel field value if set, zero value otherwise.
func (o *SmcceUeList) GetHighLevel() []string {
	if o == nil || o.HighLevel == nil {
		var ret []string
		return ret
	}
	return o.HighLevel
}

// GetHighLevelOk returns a tuple with the HighLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmcceUeList) GetHighLevelOk() ([]string, bool) {
	if o == nil || o.HighLevel == nil {
		return nil, false
	}
	return o.HighLevel, true
}

// HasHighLevel returns a boolean if a field has been set.
func (o *SmcceUeList) HasHighLevel() bool {
	if o != nil && o.HighLevel != nil {
		return true
	}

	return false
}

// SetHighLevel gets a reference to the given []string and assigns it to the HighLevel field.
func (o *SmcceUeList) SetHighLevel(v []string) {
	o.HighLevel = v
}

// GetMediumLevel returns the MediumLevel field value if set, zero value otherwise.
func (o *SmcceUeList) GetMediumLevel() []string {
	if o == nil || o.MediumLevel == nil {
		var ret []string
		return ret
	}
	return o.MediumLevel
}

// GetMediumLevelOk returns a tuple with the MediumLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmcceUeList) GetMediumLevelOk() ([]string, bool) {
	if o == nil || o.MediumLevel == nil {
		return nil, false
	}
	return o.MediumLevel, true
}

// HasMediumLevel returns a boolean if a field has been set.
func (o *SmcceUeList) HasMediumLevel() bool {
	if o != nil && o.MediumLevel != nil {
		return true
	}

	return false
}

// SetMediumLevel gets a reference to the given []string and assigns it to the MediumLevel field.
func (o *SmcceUeList) SetMediumLevel(v []string) {
	o.MediumLevel = v
}

// GetLowLevel returns the LowLevel field value if set, zero value otherwise.
func (o *SmcceUeList) GetLowLevel() []string {
	if o == nil || o.LowLevel == nil {
		var ret []string
		return ret
	}
	return o.LowLevel
}

// GetLowLevelOk returns a tuple with the LowLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmcceUeList) GetLowLevelOk() ([]string, bool) {
	if o == nil || o.LowLevel == nil {
		return nil, false
	}
	return o.LowLevel, true
}

// HasLowLevel returns a boolean if a field has been set.
func (o *SmcceUeList) HasLowLevel() bool {
	if o != nil && o.LowLevel != nil {
		return true
	}

	return false
}

// SetLowLevel gets a reference to the given []string and assigns it to the LowLevel field.
func (o *SmcceUeList) SetLowLevel(v []string) {
	o.LowLevel = v
}

func (o SmcceUeList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HighLevel != nil {
		toSerialize["highLevel"] = o.HighLevel
	}
	if o.MediumLevel != nil {
		toSerialize["mediumLevel"] = o.MediumLevel
	}
	if o.LowLevel != nil {
		toSerialize["lowLevel"] = o.LowLevel
	}
	return json.Marshal(toSerialize)
}

type NullableSmcceUeList struct {
	value *SmcceUeList
	isSet bool
}

func (v NullableSmcceUeList) Get() *SmcceUeList {
	return v.value
}

func (v *NullableSmcceUeList) Set(val *SmcceUeList) {
	v.value = val
	v.isSet = true
}

func (v NullableSmcceUeList) IsSet() bool {
	return v.isSet
}

func (v *NullableSmcceUeList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmcceUeList(val *SmcceUeList) *NullableSmcceUeList {
	return &NullableSmcceUeList{value: val, isSet: true}
}

func (v NullableSmcceUeList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmcceUeList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


