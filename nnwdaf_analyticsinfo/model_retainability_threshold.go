/*
Nnwdaf_AnalyticsInfo

Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RetainabilityThreshold struct for RetainabilityThreshold
type RetainabilityThreshold struct {
	RelFlowNum *int32 `json:"relFlowNum,omitempty"`
	RelTimeUnit *TimeUnit `json:"relTimeUnit,omitempty"`
	RelFlowRatio *int32 `json:"relFlowRatio,omitempty"`
}

// NewRetainabilityThreshold instantiates a new RetainabilityThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetainabilityThreshold() *RetainabilityThreshold {
	this := RetainabilityThreshold{}
	return &this
}

// NewRetainabilityThresholdWithDefaults instantiates a new RetainabilityThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetainabilityThresholdWithDefaults() *RetainabilityThreshold {
	this := RetainabilityThreshold{}
	return &this
}

// GetRelFlowNum returns the RelFlowNum field value if set, zero value otherwise.
func (o *RetainabilityThreshold) GetRelFlowNum() int32 {
	if o == nil || o.RelFlowNum == nil {
		var ret int32
		return ret
	}
	return *o.RelFlowNum
}

// GetRelFlowNumOk returns a tuple with the RelFlowNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetainabilityThreshold) GetRelFlowNumOk() (*int32, bool) {
	if o == nil || o.RelFlowNum == nil {
		return nil, false
	}
	return o.RelFlowNum, true
}

// HasRelFlowNum returns a boolean if a field has been set.
func (o *RetainabilityThreshold) HasRelFlowNum() bool {
	if o != nil && o.RelFlowNum != nil {
		return true
	}

	return false
}

// SetRelFlowNum gets a reference to the given int32 and assigns it to the RelFlowNum field.
func (o *RetainabilityThreshold) SetRelFlowNum(v int32) {
	o.RelFlowNum = &v
}

// GetRelTimeUnit returns the RelTimeUnit field value if set, zero value otherwise.
func (o *RetainabilityThreshold) GetRelTimeUnit() TimeUnit {
	if o == nil || o.RelTimeUnit == nil {
		var ret TimeUnit
		return ret
	}
	return *o.RelTimeUnit
}

// GetRelTimeUnitOk returns a tuple with the RelTimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetainabilityThreshold) GetRelTimeUnitOk() (*TimeUnit, bool) {
	if o == nil || o.RelTimeUnit == nil {
		return nil, false
	}
	return o.RelTimeUnit, true
}

// HasRelTimeUnit returns a boolean if a field has been set.
func (o *RetainabilityThreshold) HasRelTimeUnit() bool {
	if o != nil && o.RelTimeUnit != nil {
		return true
	}

	return false
}

// SetRelTimeUnit gets a reference to the given TimeUnit and assigns it to the RelTimeUnit field.
func (o *RetainabilityThreshold) SetRelTimeUnit(v TimeUnit) {
	o.RelTimeUnit = &v
}

// GetRelFlowRatio returns the RelFlowRatio field value if set, zero value otherwise.
func (o *RetainabilityThreshold) GetRelFlowRatio() int32 {
	if o == nil || o.RelFlowRatio == nil {
		var ret int32
		return ret
	}
	return *o.RelFlowRatio
}

// GetRelFlowRatioOk returns a tuple with the RelFlowRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetainabilityThreshold) GetRelFlowRatioOk() (*int32, bool) {
	if o == nil || o.RelFlowRatio == nil {
		return nil, false
	}
	return o.RelFlowRatio, true
}

// HasRelFlowRatio returns a boolean if a field has been set.
func (o *RetainabilityThreshold) HasRelFlowRatio() bool {
	if o != nil && o.RelFlowRatio != nil {
		return true
	}

	return false
}

// SetRelFlowRatio gets a reference to the given int32 and assigns it to the RelFlowRatio field.
func (o *RetainabilityThreshold) SetRelFlowRatio(v int32) {
	o.RelFlowRatio = &v
}

func (o RetainabilityThreshold) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RelFlowNum != nil {
		toSerialize["relFlowNum"] = o.RelFlowNum
	}
	if o.RelTimeUnit != nil {
		toSerialize["relTimeUnit"] = o.RelTimeUnit
	}
	if o.RelFlowRatio != nil {
		toSerialize["relFlowRatio"] = o.RelFlowRatio
	}
	return json.Marshal(toSerialize)
}

type NullableRetainabilityThreshold struct {
	value *RetainabilityThreshold
	isSet bool
}

func (v NullableRetainabilityThreshold) Get() *RetainabilityThreshold {
	return v.value
}

func (v *NullableRetainabilityThreshold) Set(val *RetainabilityThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableRetainabilityThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableRetainabilityThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetainabilityThreshold(val *RetainabilityThreshold) *NullableRetainabilityThreshold {
	return &NullableRetainabilityThreshold{value: val, isSet: true}
}

func (v NullableRetainabilityThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetainabilityThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


