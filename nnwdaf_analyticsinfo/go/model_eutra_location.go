/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.1.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type EutraLocation struct {

	Tai Tai `json:"tai"`

	IgnoreTai bool `json:"ignoreTai,omitempty"`

	Ecgi Ecgi `json:"ecgi"`

	IgnoreEcgi bool `json:"ignoreEcgi,omitempty"`

	AgeOfLocationInformation int32 `json:"ageOfLocationInformation,omitempty"`

	UeLocationTimestamp time.Time `json:"ueLocationTimestamp,omitempty"`

	GeographicalInformation string `json:"geographicalInformation,omitempty"`

	GeodeticInformation string `json:"geodeticInformation,omitempty"`

	GlobalNgenbId GlobalRanNodeId `json:"globalNgenbId,omitempty"`

	GlobalENbId GlobalRanNodeId `json:"globalENbId,omitempty"`
}

// AssertEutraLocationRequired checks if the required fields are not zero-ed
func AssertEutraLocationRequired(obj EutraLocation) error {
	elements := map[string]interface{}{
		"tai": obj.Tai,
		"ecgi": obj.Ecgi,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertTaiRequired(obj.Tai); err != nil {
		return err
	}
	if err := AssertEcgiRequired(obj.Ecgi); err != nil {
		return err
	}
	if err := AssertGlobalRanNodeIdRequired(obj.GlobalNgenbId); err != nil {
		return err
	}
	if err := AssertGlobalRanNodeIdRequired(obj.GlobalENbId); err != nil {
		return err
	}
	return nil
}

// AssertRecurseEutraLocationRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of EutraLocation (e.g. [][]EutraLocation), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseEutraLocationRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aEutraLocation, ok := obj.(EutraLocation)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertEutraLocationRequired(aEutraLocation)
	})
}
