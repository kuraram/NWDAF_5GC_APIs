/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.1.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// NWDAFAnalyticsDocumentApiController binds http requests to an api service and writes the service results to the http response
type NWDAFAnalyticsDocumentApiController struct {
	service NWDAFAnalyticsDocumentApiServicer
	errorHandler ErrorHandler
}

// NWDAFAnalyticsDocumentApiOption for how the controller is set up.
type NWDAFAnalyticsDocumentApiOption func(*NWDAFAnalyticsDocumentApiController)

// WithNWDAFAnalyticsDocumentApiErrorHandler inject ErrorHandler into controller
func WithNWDAFAnalyticsDocumentApiErrorHandler(h ErrorHandler) NWDAFAnalyticsDocumentApiOption {
	return func(c *NWDAFAnalyticsDocumentApiController) {
		c.errorHandler = h
	}
}

// NewNWDAFAnalyticsDocumentApiController creates a default api controller
func NewNWDAFAnalyticsDocumentApiController(s NWDAFAnalyticsDocumentApiServicer, opts ...NWDAFAnalyticsDocumentApiOption) Router {
	controller := &NWDAFAnalyticsDocumentApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NWDAFAnalyticsDocumentApiController
func (c *NWDAFAnalyticsDocumentApiController) Routes() Routes {
	return Routes{ 
		{
			"GetNWDAFAnalytics",
			strings.ToUpper("Get"),
			"/nnwdaf-analyticsinfo/v1/analytics",
			c.GetNWDAFAnalytics,
		},
	}
}

// GetNWDAFAnalytics - Read a NWDAF Analytics
func (c *NWDAFAnalyticsDocumentApiController) GetNWDAFAnalytics(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	eventIdParam := query.Get("event-id")
	anaReqParam := query.Get("ana-req")
	eventFilterParam := query.Get("event-filter")
	supportedFeaturesParam := query.Get("supported-features")
	tgtUeParam := query.Get("tgt-ue")
	result, err := c.service.GetNWDAFAnalytics(r.Context(), eventIdParam, anaReqParam, eventFilterParam, supportedFeaturesParam, tgtUeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
