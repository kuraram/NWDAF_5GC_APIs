/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.1.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Tai struct {

	PlmnId PlmnId `json:"plmnId"`

	Tac string `json:"tac"`

	Nid string `json:"nid,omitempty"`
}

// AssertTaiRequired checks if the required fields are not zero-ed
func AssertTaiRequired(obj Tai) error {
	elements := map[string]interface{}{
		"plmnId": obj.PlmnId,
		"tac": obj.Tac,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPlmnIdRequired(obj.PlmnId); err != nil {
		return err
	}
	return nil
}

// AssertRecurseTaiRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Tai (e.g. [][]Tai), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTaiRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTai, ok := obj.(Tai)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTaiRequired(aTai)
	})
}
