/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.1.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// AccessTokenReq - Contains information related to the access token request
type AccessTokenReq struct {

	GrantType string `json:"grant_type"`

	NfInstanceId string `json:"nfInstanceId"`

	NfType NfType `json:"nfType,omitempty"`

	TargetNfType NfType `json:"targetNfType,omitempty"`

	Scope string `json:"scope"`

	TargetNfInstanceId string `json:"targetNfInstanceId,omitempty"`

	RequesterPlmn PlmnId `json:"requesterPlmn,omitempty"`

	RequesterPlmnList []PlmnId `json:"requesterPlmnList,omitempty"`

	RequesterSnssaiList []Snssai `json:"requesterSnssaiList,omitempty"`

	// Fully Qualified Domain Name
	RequesterFqdn string `json:"requesterFqdn,omitempty"`

	RequesterSnpnList []PlmnIdNid `json:"requesterSnpnList,omitempty"`

	TargetPlmn PlmnId `json:"targetPlmn,omitempty"`

	TargetSnssaiList []Snssai `json:"targetSnssaiList,omitempty"`

	TargetNsiList []string `json:"targetNsiList,omitempty"`

	TargetNfSetId string `json:"targetNfSetId,omitempty"`

	TargetNfServiceSetId string `json:"targetNfServiceSetId,omitempty"`
}

// AssertAccessTokenReqRequired checks if the required fields are not zero-ed
func AssertAccessTokenReqRequired(obj AccessTokenReq) error {
	elements := map[string]interface{}{
		"grant_type": obj.GrantType,
		"nfInstanceId": obj.NfInstanceId,
		"scope": obj.Scope,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNfTypeRequired(obj.NfType); err != nil {
		return err
	}
	if err := AssertNfTypeRequired(obj.TargetNfType); err != nil {
		return err
	}
	if err := AssertPlmnIdRequired(obj.RequesterPlmn); err != nil {
		return err
	}
	for _, el := range obj.RequesterPlmnList {
		if err := AssertPlmnIdRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RequesterSnssaiList {
		if err := AssertSnssaiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RequesterSnpnList {
		if err := AssertPlmnIdNidRequired(el); err != nil {
			return err
		}
	}
	if err := AssertPlmnIdRequired(obj.TargetPlmn); err != nil {
		return err
	}
	for _, el := range obj.TargetSnssaiList {
		if err := AssertSnssaiRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseAccessTokenReqRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AccessTokenReq (e.g. [][]AccessTokenReq), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseAccessTokenReqRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAccessTokenReq, ok := obj.(AccessTokenReq)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertAccessTokenReqRequired(aAccessTokenReq)
	})
}
