/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.1.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// EthFlowDescription - Identifies an Ethernet flow
type EthFlowDescription struct {

	DestMacAddr string `json:"destMacAddr,omitempty"`

	EthType string `json:"ethType"`

	// Defines a packet filter of an IP flow.
	FDesc string `json:"fDesc,omitempty"`

	FDir Object `json:"fDir,omitempty"`

	SourceMacAddr Object `json:"sourceMacAddr,omitempty"`

	VlanTags []string `json:"vlanTags,omitempty"`

	SrcMacAddrEnd Object `json:"srcMacAddrEnd,omitempty"`

	DestMacAddrEnd Object `json:"destMacAddrEnd,omitempty"`
}

// AssertEthFlowDescriptionRequired checks if the required fields are not zero-ed
func AssertEthFlowDescriptionRequired(obj EthFlowDescription) error {
	elements := map[string]interface{}{
		"ethType": obj.EthType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseEthFlowDescriptionRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of EthFlowDescription (e.g. [][]EthFlowDescription), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseEthFlowDescriptionRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aEthFlowDescription, ok := obj.(EthFlowDescription)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertEthFlowDescriptionRequired(aEthFlowDescription)
	})
}
