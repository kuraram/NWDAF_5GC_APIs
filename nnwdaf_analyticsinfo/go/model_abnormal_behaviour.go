/*
 * Nnwdaf_AnalyticsInfo
 *
 * Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.1.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type AbnormalBehaviour struct {

	Supis []string `json:"supis,omitempty"`

	Excep Exception `json:"excep"`

	Dnn string `json:"dnn,omitempty"`

	Snssai Snssai `json:"snssai,omitempty"`

	Ratio int32 `json:"ratio,omitempty"`

	Confidence int32 `json:"confidence,omitempty"`

	AddtMeasInfo AdditionalMeasurement `json:"addtMeasInfo,omitempty"`
}

// AssertAbnormalBehaviourRequired checks if the required fields are not zero-ed
func AssertAbnormalBehaviourRequired(obj AbnormalBehaviour) error {
	elements := map[string]interface{}{
		"excep": obj.Excep,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertExceptionRequired(obj.Excep); err != nil {
		return err
	}
	if err := AssertSnssaiRequired(obj.Snssai); err != nil {
		return err
	}
	if err := AssertAdditionalMeasurementRequired(obj.AddtMeasInfo); err != nil {
		return err
	}
	return nil
}

// AssertRecurseAbnormalBehaviourRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AbnormalBehaviour (e.g. [][]AbnormalBehaviour), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseAbnormalBehaviourRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAbnormalBehaviour, ok := obj.(AbnormalBehaviour)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertAbnormalBehaviourRequired(aAbnormalBehaviour)
	})
}
