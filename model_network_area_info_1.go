/*
Nnwdaf_AnalyticsInfo

Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NetworkAreaInfo1 Describes a network area information in which the NF service consumer requests the number of UEs.
type NetworkAreaInfo1 struct {
	// Contains a list of E-UTRA cell identities.
	Ecgis []Ecgi `json:"ecgis,omitempty"`
	// Contains a list of NR cell identities.
	Ncgis []Ncgi `json:"ncgis,omitempty"`
	// Contains a list of NG RAN nodes.
	GRanNodeIds []GlobalRanNodeId `json:"gRanNodeIds,omitempty"`
	// Contains a list of tracking area identities.
	Tais []Tai `json:"tais,omitempty"`
}

// NewNetworkAreaInfo1 instantiates a new NetworkAreaInfo1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkAreaInfo1() *NetworkAreaInfo1 {
	this := NetworkAreaInfo1{}
	return &this
}

// NewNetworkAreaInfo1WithDefaults instantiates a new NetworkAreaInfo1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkAreaInfo1WithDefaults() *NetworkAreaInfo1 {
	this := NetworkAreaInfo1{}
	return &this
}

// GetEcgis returns the Ecgis field value if set, zero value otherwise.
func (o *NetworkAreaInfo1) GetEcgis() []Ecgi {
	if o == nil || o.Ecgis == nil {
		var ret []Ecgi
		return ret
	}
	return o.Ecgis
}

// GetEcgisOk returns a tuple with the Ecgis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAreaInfo1) GetEcgisOk() ([]Ecgi, bool) {
	if o == nil || o.Ecgis == nil {
		return nil, false
	}
	return o.Ecgis, true
}

// HasEcgis returns a boolean if a field has been set.
func (o *NetworkAreaInfo1) HasEcgis() bool {
	if o != nil && o.Ecgis != nil {
		return true
	}

	return false
}

// SetEcgis gets a reference to the given []Ecgi and assigns it to the Ecgis field.
func (o *NetworkAreaInfo1) SetEcgis(v []Ecgi) {
	o.Ecgis = v
}

// GetNcgis returns the Ncgis field value if set, zero value otherwise.
func (o *NetworkAreaInfo1) GetNcgis() []Ncgi {
	if o == nil || o.Ncgis == nil {
		var ret []Ncgi
		return ret
	}
	return o.Ncgis
}

// GetNcgisOk returns a tuple with the Ncgis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAreaInfo1) GetNcgisOk() ([]Ncgi, bool) {
	if o == nil || o.Ncgis == nil {
		return nil, false
	}
	return o.Ncgis, true
}

// HasNcgis returns a boolean if a field has been set.
func (o *NetworkAreaInfo1) HasNcgis() bool {
	if o != nil && o.Ncgis != nil {
		return true
	}

	return false
}

// SetNcgis gets a reference to the given []Ncgi and assigns it to the Ncgis field.
func (o *NetworkAreaInfo1) SetNcgis(v []Ncgi) {
	o.Ncgis = v
}

// GetGRanNodeIds returns the GRanNodeIds field value if set, zero value otherwise.
func (o *NetworkAreaInfo1) GetGRanNodeIds() []GlobalRanNodeId {
	if o == nil || o.GRanNodeIds == nil {
		var ret []GlobalRanNodeId
		return ret
	}
	return o.GRanNodeIds
}

// GetGRanNodeIdsOk returns a tuple with the GRanNodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAreaInfo1) GetGRanNodeIdsOk() ([]GlobalRanNodeId, bool) {
	if o == nil || o.GRanNodeIds == nil {
		return nil, false
	}
	return o.GRanNodeIds, true
}

// HasGRanNodeIds returns a boolean if a field has been set.
func (o *NetworkAreaInfo1) HasGRanNodeIds() bool {
	if o != nil && o.GRanNodeIds != nil {
		return true
	}

	return false
}

// SetGRanNodeIds gets a reference to the given []GlobalRanNodeId and assigns it to the GRanNodeIds field.
func (o *NetworkAreaInfo1) SetGRanNodeIds(v []GlobalRanNodeId) {
	o.GRanNodeIds = v
}

// GetTais returns the Tais field value if set, zero value otherwise.
func (o *NetworkAreaInfo1) GetTais() []Tai {
	if o == nil || o.Tais == nil {
		var ret []Tai
		return ret
	}
	return o.Tais
}

// GetTaisOk returns a tuple with the Tais field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAreaInfo1) GetTaisOk() ([]Tai, bool) {
	if o == nil || o.Tais == nil {
		return nil, false
	}
	return o.Tais, true
}

// HasTais returns a boolean if a field has been set.
func (o *NetworkAreaInfo1) HasTais() bool {
	if o != nil && o.Tais != nil {
		return true
	}

	return false
}

// SetTais gets a reference to the given []Tai and assigns it to the Tais field.
func (o *NetworkAreaInfo1) SetTais(v []Tai) {
	o.Tais = v
}

func (o NetworkAreaInfo1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ecgis != nil {
		toSerialize["ecgis"] = o.Ecgis
	}
	if o.Ncgis != nil {
		toSerialize["ncgis"] = o.Ncgis
	}
	if o.GRanNodeIds != nil {
		toSerialize["gRanNodeIds"] = o.GRanNodeIds
	}
	if o.Tais != nil {
		toSerialize["tais"] = o.Tais
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkAreaInfo1 struct {
	value *NetworkAreaInfo1
	isSet bool
}

func (v NullableNetworkAreaInfo1) Get() *NetworkAreaInfo1 {
	return v.value
}

func (v *NullableNetworkAreaInfo1) Set(val *NetworkAreaInfo1) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkAreaInfo1) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkAreaInfo1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkAreaInfo1(val *NetworkAreaInfo1) *NullableNetworkAreaInfo1 {
	return &NullableNetworkAreaInfo1{value: val, isSet: true}
}

func (v NullableNetworkAreaInfo1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkAreaInfo1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


