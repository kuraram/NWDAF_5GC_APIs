/*
Nnwdaf_AnalyticsInfo

Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NumberAverage Represents average and variance information.
type NumberAverage struct {
	Number int32 `json:"number"`
	// string with format 'float' as defined in OpenAPI.
	Variance float32 `json:"variance"`
}

// NewNumberAverage instantiates a new NumberAverage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberAverage(number int32, variance float32) *NumberAverage {
	this := NumberAverage{}
	this.Number = number
	this.Variance = variance
	return &this
}

// NewNumberAverageWithDefaults instantiates a new NumberAverage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberAverageWithDefaults() *NumberAverage {
	this := NumberAverage{}
	return &this
}

// GetNumber returns the Number field value
func (o *NumberAverage) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *NumberAverage) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *NumberAverage) SetNumber(v int32) {
	o.Number = v
}

// GetVariance returns the Variance field value
func (o *NumberAverage) GetVariance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Variance
}

// GetVarianceOk returns a tuple with the Variance field value
// and a boolean to check if the value has been set.
func (o *NumberAverage) GetVarianceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Variance, true
}

// SetVariance sets field value
func (o *NumberAverage) SetVariance(v float32) {
	o.Variance = v
}

func (o NumberAverage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["number"] = o.Number
	}
	if true {
		toSerialize["variance"] = o.Variance
	}
	return json.Marshal(toSerialize)
}

type NullableNumberAverage struct {
	value *NumberAverage
	isSet bool
}

func (v NullableNumberAverage) Get() *NumberAverage {
	return v.value
}

func (v *NullableNumberAverage) Set(val *NumberAverage) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberAverage) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberAverage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberAverage(val *NumberAverage) *NullableNumberAverage {
	return &NullableNumberAverage{value: val, isSet: true}
}

func (v NullableNumberAverage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberAverage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


