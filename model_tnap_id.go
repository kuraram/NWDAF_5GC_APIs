/*
Nnwdaf_AnalyticsInfo

Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TnapId struct for TnapId
type TnapId struct {
	SsId *string `json:"ssId,omitempty"`
	BssId *string `json:"bssId,omitempty"`
	CivicAddress *string `json:"civicAddress,omitempty"`
}

// NewTnapId instantiates a new TnapId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTnapId() *TnapId {
	this := TnapId{}
	return &this
}

// NewTnapIdWithDefaults instantiates a new TnapId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTnapIdWithDefaults() *TnapId {
	this := TnapId{}
	return &this
}

// GetSsId returns the SsId field value if set, zero value otherwise.
func (o *TnapId) GetSsId() string {
	if o == nil || o.SsId == nil {
		var ret string
		return ret
	}
	return *o.SsId
}

// GetSsIdOk returns a tuple with the SsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TnapId) GetSsIdOk() (*string, bool) {
	if o == nil || o.SsId == nil {
		return nil, false
	}
	return o.SsId, true
}

// HasSsId returns a boolean if a field has been set.
func (o *TnapId) HasSsId() bool {
	if o != nil && o.SsId != nil {
		return true
	}

	return false
}

// SetSsId gets a reference to the given string and assigns it to the SsId field.
func (o *TnapId) SetSsId(v string) {
	o.SsId = &v
}

// GetBssId returns the BssId field value if set, zero value otherwise.
func (o *TnapId) GetBssId() string {
	if o == nil || o.BssId == nil {
		var ret string
		return ret
	}
	return *o.BssId
}

// GetBssIdOk returns a tuple with the BssId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TnapId) GetBssIdOk() (*string, bool) {
	if o == nil || o.BssId == nil {
		return nil, false
	}
	return o.BssId, true
}

// HasBssId returns a boolean if a field has been set.
func (o *TnapId) HasBssId() bool {
	if o != nil && o.BssId != nil {
		return true
	}

	return false
}

// SetBssId gets a reference to the given string and assigns it to the BssId field.
func (o *TnapId) SetBssId(v string) {
	o.BssId = &v
}

// GetCivicAddress returns the CivicAddress field value if set, zero value otherwise.
func (o *TnapId) GetCivicAddress() string {
	if o == nil || o.CivicAddress == nil {
		var ret string
		return ret
	}
	return *o.CivicAddress
}

// GetCivicAddressOk returns a tuple with the CivicAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TnapId) GetCivicAddressOk() (*string, bool) {
	if o == nil || o.CivicAddress == nil {
		return nil, false
	}
	return o.CivicAddress, true
}

// HasCivicAddress returns a boolean if a field has been set.
func (o *TnapId) HasCivicAddress() bool {
	if o != nil && o.CivicAddress != nil {
		return true
	}

	return false
}

// SetCivicAddress gets a reference to the given string and assigns it to the CivicAddress field.
func (o *TnapId) SetCivicAddress(v string) {
	o.CivicAddress = &v
}

func (o TnapId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SsId != nil {
		toSerialize["ssId"] = o.SsId
	}
	if o.BssId != nil {
		toSerialize["bssId"] = o.BssId
	}
	if o.CivicAddress != nil {
		toSerialize["civicAddress"] = o.CivicAddress
	}
	return json.Marshal(toSerialize)
}

type NullableTnapId struct {
	value *TnapId
	isSet bool
}

func (v NullableTnapId) Get() *TnapId {
	return v.value
}

func (v *NullableTnapId) Set(val *TnapId) {
	v.value = val
	v.isSet = true
}

func (v NullableTnapId) IsSet() bool {
	return v.isSet
}

func (v *NullableTnapId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTnapId(val *TnapId) *NullableTnapId {
	return &NullableTnapId{value: val, isSet: true}
}

func (v NullableTnapId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTnapId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


