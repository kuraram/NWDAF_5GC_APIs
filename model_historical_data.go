/*
Nnwdaf_AnalyticsInfo

Nnwdaf_AnalyticsInfo Service API.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.2.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// HistoricalData Contains historical data related to an analytics subscription.
type HistoricalData struct {
	// string with format 'date-time' as defined in OpenAPI.
	StartTime *time.Time `json:"startTime,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	EndTime *time.Time `json:"endTime,omitempty"`
	// Information about subscriptions with the data sources.
	SubsWithSources []string `json:"subsWithSources,omitempty"`
	// Historical data related to the analytics.
	Data []string `json:"data"`
}

// NewHistoricalData instantiates a new HistoricalData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricalData(data []string) *HistoricalData {
	this := HistoricalData{}
	this.Data = data
	return &this
}

// NewHistoricalDataWithDefaults instantiates a new HistoricalData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricalDataWithDefaults() *HistoricalData {
	this := HistoricalData{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *HistoricalData) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalData) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *HistoricalData) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *HistoricalData) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *HistoricalData) GetEndTime() time.Time {
	if o == nil || o.EndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalData) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *HistoricalData) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *HistoricalData) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetSubsWithSources returns the SubsWithSources field value if set, zero value otherwise.
func (o *HistoricalData) GetSubsWithSources() []string {
	if o == nil || o.SubsWithSources == nil {
		var ret []string
		return ret
	}
	return o.SubsWithSources
}

// GetSubsWithSourcesOk returns a tuple with the SubsWithSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalData) GetSubsWithSourcesOk() ([]string, bool) {
	if o == nil || o.SubsWithSources == nil {
		return nil, false
	}
	return o.SubsWithSources, true
}

// HasSubsWithSources returns a boolean if a field has been set.
func (o *HistoricalData) HasSubsWithSources() bool {
	if o != nil && o.SubsWithSources != nil {
		return true
	}

	return false
}

// SetSubsWithSources gets a reference to the given []string and assigns it to the SubsWithSources field.
func (o *HistoricalData) SetSubsWithSources(v []string) {
	o.SubsWithSources = v
}

// GetData returns the Data field value
func (o *HistoricalData) GetData() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *HistoricalData) GetDataOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *HistoricalData) SetData(v []string) {
	o.Data = v
}

func (o HistoricalData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartTime != nil {
		toSerialize["startTime"] = o.StartTime
	}
	if o.EndTime != nil {
		toSerialize["endTime"] = o.EndTime
	}
	if o.SubsWithSources != nil {
		toSerialize["subsWithSources"] = o.SubsWithSources
	}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableHistoricalData struct {
	value *HistoricalData
	isSet bool
}

func (v NullableHistoricalData) Get() *HistoricalData {
	return v.value
}

func (v *NullableHistoricalData) Set(val *HistoricalData) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricalData) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricalData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricalData(val *HistoricalData) *NullableHistoricalData {
	return &NullableHistoricalData{value: val, isSet: true}
}

func (v NullableHistoricalData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricalData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


